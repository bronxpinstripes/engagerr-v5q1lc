name: Engagerr CI

on:
  pull_request:
    branches: ['*']
  push:
    branches: ['main']

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install web dependencies
        run: npm ci

      - name: Install backend dependencies
        run: |
          if [ -d "backend" ]; then
            cd backend
            npm ci
          fi

      - name: Run linting on web code
        run: npm run lint

      - name: Run linting on backend code
        run: |
          if [ -d "backend" ]; then
            cd backend
            npm run lint
          fi

      - name: Run type checking on web code
        run: npm run typecheck

      - name: Run type checking on backend code
        run: |
          if [ -d "backend" ]; then
            cd backend
            npm run typecheck
          fi

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run web unit tests with coverage
        run: npm run test:coverage

      - name: Run backend unit tests with coverage
        run: |
          if [ -d "backend" ]; then
            cd backend
            npm ci
            npm run test:coverage
          fi

      - name: Verify web code coverage
        run: |
          COVERAGE=$(npm run test:coverage:report --silent | grep "All files" | awk '{print $4}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Web code coverage is below 80%. Current coverage: $COVERAGE%"
            exit 1
          else
            echo "Web code coverage meets the required threshold: $COVERAGE%"
          fi

      - name: Verify backend code coverage
        run: |
          if [ -d "backend" ]; then
            cd backend
            COVERAGE=$(npm run test:coverage:report --silent | grep "All files" | awk '{print $4}' | sed 's/%//')
            if (( $(echo "$COVERAGE < 80" | bc -l) )); then
              echo "Backend code coverage is below 80%. Current coverage: $COVERAGE%"
              exit 1
            else
              echo "Backend code coverage meets the required threshold: $COVERAGE%"
            fi
          fi

      - name: Upload web coverage report
        uses: actions/upload-artifact@v3
        with:
          name: web-coverage-report
          path: coverage/
          retention-days: 14

      - name: Upload backend coverage report
        uses: actions/upload-artifact@v3
        if: hashFiles('backend/') != ''
        with:
          name: backend-coverage-report
          path: backend/coverage/
          retention-days: 14

  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install web dependencies
        run: npm ci

      - name: Build NextJS web application
        run: npm run build

      - name: Install backend dependencies
        run: |
          if [ -d "backend" ]; then
            cd backend
            npm ci
          fi

      - name: Build backend application
        run: |
          if [ -d "backend" ]; then
            cd backend
            npm run build
          fi

  build-containers:
    name: Build AI Model Containers
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Llama container
        uses: docker/build-push-action@v4
        with:
          context: ./ai/llama
          file: ./ai/llama/Dockerfile
          push: false
          tags: engagerr/llama:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Mistral container
        uses: docker/build-push-action@v4
        with:
          context: ./ai/mistral
          file: ./ai/mistral/Dockerfile
          push: false
          tags: engagerr/mistral:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, build]
    if: github.event_name == 'pull_request'
    outputs:
      preview_url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Preview to Vercel
        id: deploy
        run: echo "url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})" >> $GITHUB_OUTPUT

      - name: Comment on PR with Preview URL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const preview_url = '${{ steps.deploy.outputs.url }}';
            
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `ðŸš€ Preview deployed successfully!\n\n[View Preview](${preview_url})`
            });

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-preview]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run integration tests
        run: npm run test:integration
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.deploy-preview.outputs.preview_url }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: playwright-report/
          retention-days: 7